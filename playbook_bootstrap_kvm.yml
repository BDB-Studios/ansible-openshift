---

- name: Install KVM server
  hosts: kvm_host
  become: true

  pre_tasks:
    - name: Check we are running Enterprise Linux
      ansible.builtin.assert:
        that:
          - ansible_os_family == "RedHat"
        fail_msg: "Please run this against an Enterprise Linux"
        success_msg: "Enterprise linux detected, continuing..."
    - name: Ensure that the cluster_id variable is defined
      ansible.builtin.assert:
        that:
          - cluster_id is defined
        fail_msg: "Please pass in a unique cluster_id variable using `-e cluster_id='' this is the name of your OS cluster"
  roles:
    - role: bdbstudios.openshift_kvm.prepare_server
      tags:
        - kvm
        - network

  post_tasks:
    - name: Set our Network Bridge Name
      ansible.builtin.set_fact:
        network_bridge_name: "{{ prepare_server_virt_net_facts.ansible_facts.ansible_libvirt_networks[dns.clusterid].bridge }}"
      tags:
        - always

    - name: Restart our primary interface
      block:
        - name: Restart connection {{ ansible_default_ipv4.alias }} # noqa no-changed-when
          ansible.builtin.command:
            cmd: "nmcli con up {{ ansible_default_ipv4.alias }}"
      rescue:
        - name: Restart connection System {{ ansible_default_ipv4.alias }}  # noqa no-changed-when
          ansible.builtin.command:
            cmd: "nmcli con up 'System {{ ansible_default_ipv4.alias }}'"

- name: Import our bootstrap bastion playbook
  ansible.builtin.import_playbook: playbook_bootstrap_bastion.yml
  tags:
    - ad
    - dns
    - dhcpd
    - tftpd
    - httpd
    - haproxy
    - assets
    - nfs
    - squid

- name: Create our VMS
  hosts: kvm_host
  become: true
  roles:
    - role: bdbstudios.openshift_kvm.create_nodes
      tags:
        - kvm-instances
...
